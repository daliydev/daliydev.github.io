<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on Even - A super concise theme for Hugo</title>
    <link>http://daliydev.github.io/categories/java/</link>
    <description>Recent content in java on Even - A super concise theme for Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language><atom:link href="http://daliydev.github.io/categories/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[java] Adapter 패턴</title>
      <link>http://daliydev.github.io/post/java/adapter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://daliydev.github.io/post/java/adapter/</guid>
      <description>서로 다른 인터페이스가 호환이 되지 않을 때 인터페이스에 영향 받는 부분들을 수정하다가 시스템 장애가 발생하는 일이 발생할 수 있기 때문에, 어댑터 클래스를 만들어 기</description>
    </item>
    
    <item>
      <title>[java] Factory 패턴</title>
      <link>http://daliydev.github.io/post/java/factory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://daliydev.github.io/post/java/factory/</guid>
      <description>팩토리 패턴은 객체 생성 로직을 분리하여 클라이언트와 결합도를 낮추어, 코드 변경 없이 기능을 확장하거나 변경할 수 있다 (OCP) 종류는 팩토리 메서드 패턴, 추상 팩토리 패</description>
    </item>
    
    <item>
      <title>[java] image resize (javax.imageio.ImageIO)</title>
      <link>http://daliydev.github.io/post/java/resize/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://daliydev.github.io/post/java/resize/</guid>
      <description>Java에서 제공하는 패키지로 이미지 크기 변경하기. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 import java.awt.Graphics; import java.awt.Image; import java.awt.image.BufferedImage; import java.io.File; import java.io.IOException; import javax.imageio.ImageIO; public class Resize { public static void main(String[] args)</description>
    </item>
    
    <item>
      <title>[java] jpg 확장자가 gif처럼 동작하는 경우 (Convert File to Hex)</title>
      <link>http://daliydev.github.io/post/file-to-hex/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://daliydev.github.io/post/file-to-hex/</guid>
      <description>파일 객체를 hex로 변환해서 gif 인지 확인한다. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49</description>
    </item>
    
    <item>
      <title>[java] PDF to JPG (pdfbox)</title>
      <link>http://daliydev.github.io/post/java/pdf-to-jpg/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://daliydev.github.io/post/java/pdf-to-jpg/</guid>
      <description>PDF를 이미지로 변환하기 위해 Apache pdfbox 라이브러리를 사용한다. gradle 1 implementation group: &amp;#39;org.apache.pdfbox&amp;#39;, name: &amp;#39;pdfbox&amp;#39;, version: &amp;#39;2.0.26&amp;#39; maven 1 2 3 4 5 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.pdfbox&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;pdfbox&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.0.26&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 예제 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21</description>
    </item>
    
    <item>
      <title>[java] Prototype 패턴</title>
      <link>http://daliydev.github.io/post/java/prototype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://daliydev.github.io/post/java/prototype/</guid>
      <description>프로토타입은 생성 패턴 중 하나이다. 객체 생성하는 데 시간과 비용이 많이 들고, 이미 유사한 객체가 존재하는 경우에 사용합니다. new를 이용해서 객체를 생성하지</description>
    </item>
    
    <item>
      <title>[java] Proxy 패턴</title>
      <link>http://daliydev.github.io/post/java/proxy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://daliydev.github.io/post/java/proxy/</guid>
      <description>프록시 패턴은 사용할 객체를 직접적으로 참조하는 것이 아닌 중간 객체를 통해 대상에 접근하는 방법이다. 단순히 보안상의 이유만으로 사용하는 것이 아닌, 캐싱 처리함</description>
    </item>
    
    <item>
      <title>[java] Singleton 패턴</title>
      <link>http://daliydev.github.io/post/java/singleton/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://daliydev.github.io/post/java/singleton/</guid>
      <description>싱글톤은 오직 한 개의 인스턴스만 생성하여, 불필요한 객체 생성을 피한다. Eager Initialization 사용하지 않더라도 인스턴스가 항상 생성된다는 단점. static은 Class가</description>
    </item>
    
    <item>
      <title>[java] String 객체 메모리 취약점</title>
      <link>http://daliydev.github.io/post/java-memory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://daliydev.github.io/post/java-memory/</guid>
      <description>중요 문자열을 String 멤버 변수에 담는다면 메모리에 노출되기 때문에, Overwrite가 가능한 char[]를 이용한다. String 객체는 null을 대입해도, JVM</description>
    </item>
    
    <item>
      <title>git 기본 명령어</title>
      <link>http://daliydev.github.io/post/etc/git-command/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://daliydev.github.io/post/etc/git-command/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70</description>
    </item>
    
  </channel>
</rss>
