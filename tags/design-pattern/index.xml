<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>design pattern on Even - A super concise theme for Hugo</title>
    <link>http://daliydev.github.io/tags/design-pattern/</link>
    <description>Recent content in design pattern on Even - A super concise theme for Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language><atom:link href="http://daliydev.github.io/tags/design-pattern/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[java] Adapter 패턴</title>
      <link>http://daliydev.github.io/post/java/adapter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://daliydev.github.io/post/java/adapter/</guid>
      <description>서로 다른 인터페이스가 호환이 되지 않을 때 인터페이스에 영향 받는 부분들을 수정하다가 시스템 장애가 발생하는 일이 발생할 수 있기 때문에, 어댑터 클래스를 만들어 기</description>
    </item>
    
    <item>
      <title>[java] Bridge 패턴</title>
      <link>http://daliydev.github.io/post/java/bridge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://daliydev.github.io/post/java/bridge/</guid>
      <description>브릿지 패턴은 기능과 구현에 대해 클래스를 분리하여 독립적으로 변경이 가능하고 확장이 가능하도록 합니다. 즉, 양쪽 클래스의 결합도가 낮아져서 독립적으로 변경과</description>
    </item>
    
    <item>
      <title>[java] Composite 패턴</title>
      <link>http://daliydev.github.io/post/java/composite/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://daliydev.github.io/post/java/composite/</guid>
      <description>컴포지트 패턴은 클라이언트가 복합 객체나 단일 객체를 동일하게 취급하는 것을 목적으로 한다. 전체 구조를 나타내기 위해 객체를 트리 구조로 구성합니다. 예제) 이동</description>
    </item>
    
    <item>
      <title>[java] Factory 패턴</title>
      <link>http://daliydev.github.io/post/java/factory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://daliydev.github.io/post/java/factory/</guid>
      <description>팩토리 패턴은 객체 생성 로직을 분리하여 클라이언트와 결합도를 낮추어, 코드 변경 없이 기능을 확장하거나 변경할 수 있다 (OCP) 종류는 팩토리 메서드 패턴, 추상 팩토리 패</description>
    </item>
    
    <item>
      <title>[java] Flyweight 패턴</title>
      <link>http://daliydev.github.io/post/java/flyweight/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://daliydev.github.io/post/java/flyweight/</guid>
      <description>플라이웨이트 패턴은 객체 생성 횟수를 줄이고, 메모리 사용량을 줄이고 성능을 개선하기 위해 사용합니다. (객체를 공유하는 방식으로 메모리 사용량을 줄임) 예시)</description>
    </item>
    
    <item>
      <title>[java] Prototype 패턴</title>
      <link>http://daliydev.github.io/post/java/prototype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://daliydev.github.io/post/java/prototype/</guid>
      <description>프로토타입은 생성 패턴 중 하나이다. 객체 생성하는 데 시간과 비용이 많이 들고, 이미 유사한 객체가 존재하는 경우에 사용합니다. new를 이용해서 객체를 생성하지</description>
    </item>
    
    <item>
      <title>[java] Proxy 패턴</title>
      <link>http://daliydev.github.io/post/java/proxy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://daliydev.github.io/post/java/proxy/</guid>
      <description>프록시 패턴은 사용할 객체를 직접적으로 참조하는 것이 아닌 중간 객체를 통해 대상에 접근하는 방법이다. 단순히 보안상의 이유만으로 사용하는 것이 아닌, 캐싱 처리함</description>
    </item>
    
    <item>
      <title>[java] Singleton 패턴</title>
      <link>http://daliydev.github.io/post/java/singleton/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://daliydev.github.io/post/java/singleton/</guid>
      <description>싱글톤은 오직 한 개의 인스턴스만 생성하여, 불필요한 객체 생성을 피한다. Eager Initialization 사용하지 않더라도 인스턴스가 항상 생성된다는 단점. static은 Class가</description>
    </item>
    
  </channel>
</rss>
