<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>design pattern on Daily</title>
    <link>http://daliydev.github.io/tags/design-pattern/</link>
    <description>Recent content in design pattern on Daily</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language><atom:link href="http://daliydev.github.io/tags/design-pattern/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[java] Adapter 패턴</title>
      <link>http://daliydev.github.io/post/java/adapter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://daliydev.github.io/post/java/adapter/</guid>
      <description>어댑터 패턴은 서로 다른 인터페이스가 호환이 되지 않을 때 사용한다. 인터페이스에 영향받는 부분들을 수정하다가 시스템 장애가 발생하는 일이 발생할 수 있기 때문에,</description>
    </item>
    
    <item>
      <title>[java] Bridge 패턴</title>
      <link>http://daliydev.github.io/post/java/bridge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://daliydev.github.io/post/java/bridge/</guid>
      <description>브릿지 패턴은 기능과 구현에 대해 클래스를 분리하여 독립적으로 변경이 가능하고 확장이 가능하도록 합니다. 즉, 양쪽 클래스의 결합도가 낮아져서 독립적으로 변경과</description>
    </item>
    
    <item>
      <title>[java] Command 패턴</title>
      <link>http://daliydev.github.io/post/java/command/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://daliydev.github.io/post/java/command/</guid>
      <description>커맨드 패턴은 요청을 객체로 캡슐화하여 처리하는 방식이다. 기능을 캡슐화함으로써 재사용성이 높은 클래스로 설계하는 패턴이다. 일반적으로 기능을 메서드로 정의</description>
    </item>
    
    <item>
      <title>[java] Composite 패턴</title>
      <link>http://daliydev.github.io/post/java/composite/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://daliydev.github.io/post/java/composite/</guid>
      <description>컴포지트 패턴은 클라이언트가 복합 객체나 단일 객체를 동일하게 취급하는 것을 목적으로 한다. 전체 구조를 나타내기 위해 객체를 트리 구조로 구성합니다. 예제) 이동</description>
    </item>
    
    <item>
      <title>[java] Decorator 패턴</title>
      <link>http://daliydev.github.io/post/java/decorator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://daliydev.github.io/post/java/decorator/</guid>
      <description>데코레이터 패턴은 어떤 객체에 책임을 동적으로 추가하는 패턴입니다. 즉, 객체에 새로운 기능을 추가하거나 변화시켜서 기능을 유연하게 확장할 수 있게 해줍니다. 단</description>
    </item>
    
    <item>
      <title>[java] Facade 패턴</title>
      <link>http://daliydev.github.io/post/java/facade/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://daliydev.github.io/post/java/facade/</guid>
      <description>퍼사드 패턴은 구조 패턴의 한 종류이다. 설계의 목표는 서브시스템 간 종속성을 최소화하는 것. 서브시스템에 대한 의존성을 한곳으로 모을 수 있는 장점이 있지만, 클라</description>
    </item>
    
    <item>
      <title>[java] Factory 패턴</title>
      <link>http://daliydev.github.io/post/java/factory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://daliydev.github.io/post/java/factory/</guid>
      <description>팩토리 패턴은 객체 생성 로직을 분리하여 클라이언트와 결합도를 낮추어, 코드 변경 없이 기능을 확장하거나 변경할 수 있다 (OCP) 종류는 팩토리 메서드 패턴, 추상 팩토리 패</description>
    </item>
    
    <item>
      <title>[java] Flyweight 패턴</title>
      <link>http://daliydev.github.io/post/java/flyweight/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://daliydev.github.io/post/java/flyweight/</guid>
      <description>플라이웨이트 패턴은 객체 생성 횟수를 줄이고, 메모리 사용량을 줄이고 성능을 개선하기 위해 사용합니다. (객체를 공유하는 방식으로 메모리 사용량을 줄임) 예시)</description>
    </item>
    
    <item>
      <title>[java] Mediator 패턴</title>
      <link>http://daliydev.github.io/post/java/mediator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://daliydev.github.io/post/java/mediator/</guid>
      <description>중재자 패턴은 클래스 간의 복잡한 관계를 캡슐화하여 하나의 클래스에서 처리하는 패턴입니다. M:N 관계를 해당 패턴을 이용하면 M:1 관계로 만들어 객체들 사이의 결합도를</description>
    </item>
    
    <item>
      <title>[java] Observer 패턴</title>
      <link>http://daliydev.github.io/post/java/observer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://daliydev.github.io/post/java/observer/</guid>
      <description>옵저버 패턴은 한 객체의 변경사항이 다른 객체들에 알려야 할 경우 사용한다.(one-to-many) 즉, 동적으로 변경이 필요한 경우 예제 1) 회사에서 임직원에</description>
    </item>
    
    <item>
      <title>[java] Prototype 패턴</title>
      <link>http://daliydev.github.io/post/java/prototype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://daliydev.github.io/post/java/prototype/</guid>
      <description>프로토타입은 생성 패턴 중 하나이다. 객체 생성하는 데 시간과 비용이 많이 들고, 이미 유사한 객체가 존재하는 경우에 사용합니다. new를 이용해서 객체를 생성하지</description>
    </item>
    
    <item>
      <title>[java] Proxy 패턴</title>
      <link>http://daliydev.github.io/post/java/proxy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://daliydev.github.io/post/java/proxy/</guid>
      <description>프록시 패턴은 사용할 객체를 직접적으로 참조하는 것이 아닌 중간 객체를 통해 대상에 접근하는 방법이다. 단순히 보안상의 이유만으로 사용하는 것이 아닌, 캐싱 처리함</description>
    </item>
    
    <item>
      <title>[java] Singleton 패턴</title>
      <link>http://daliydev.github.io/post/java/singleton/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://daliydev.github.io/post/java/singleton/</guid>
      <description>싱글톤은 오직 한 개의 인스턴스만 생성하여, 불필요한 객체 생성을 피한다. Eager Initialization 사용하지 않더라도 인스턴스가 항상 생성된다는 단점. static은 Class가</description>
    </item>
    
    <item>
      <title>[java] Strategy 패턴</title>
      <link>http://daliydev.github.io/post/java/strategy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://daliydev.github.io/post/java/strategy/</guid>
      <description>전략 패턴은 교체 가능한 알고리즘을 만드는데 사용되는 패턴이다. 동일 계열의 알고리즘을 정의하고, 각 알고리즘을 캡슐화하여 상호교환이 가능하도록 만든다. 단일</description>
    </item>
    
    <item>
      <title>[java] Template 패턴</title>
      <link>http://daliydev.github.io/post/java/template/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://daliydev.github.io/post/java/template/</guid>
      <description>템플릿 메서드 패턴은 공통으로 사용하는 메서드는 상위 클래스에서 정의하고, 다르게 구현할 메서드는 추상화하여 하위 클래스에서 구현하도록 하는 패턴이다. 코드 중</description>
    </item>
    
    <item>
      <title>[java] Visitor 패턴</title>
      <link>http://daliydev.github.io/post/java/visitor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://daliydev.github.io/post/java/visitor/</guid>
      <description>방문자 패턴은 객체 구조에서 분리시키는 패턴. 객체와 알고리즘을 분리하면 작업이 수행되는 객체의 클래스를 변경하지 않고도 새로운 알고리즘을 정의할 수 있다. 방문</description>
    </item>
    
    <item>
      <title>[java] 책임 연쇄(Chain of Responsibility) 패턴</title>
      <link>http://daliydev.github.io/post/java/chain-of-responsibility/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://daliydev.github.io/post/java/chain-of-responsibility/</guid>
      <description>책임 연쇄 패턴은 클라이언트로부터 받은 요청을 여러 객체들이 연쇄적으로 처리 기회를 가지는 패턴이다. 요청의 발신자와 수신자를 분리하고, 처리하는 객체는 여러개</description>
    </item>
    
  </channel>
</rss>
